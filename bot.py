import logging
import os
import google.generativeai as genai

from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from telegram.constants import ChatAction
from collections import deque

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ---
# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏–∏ –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
MAX_HISTORY_LENGTH = 10 

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –ù–ê–°–¢–†–û–ô–ö–ê –•–ê–†–ê–ö–¢–ï–†–ê –ë–û–¢–ê (SYSTEM PROMPT) ---
SYSTEM_PROMPT = """
–¢—ã ‚Äî —É—á–∞—Å—Ç–Ω–∏–∫ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞ –ø–æ –∏–º–µ–Ω–∏ "–ì–µ—à–∞". –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –≤–µ—Å—Ç–∏ —Å–µ–±—è –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —á–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä—ã–π –æ–±—â–∞–µ—Ç—Å—è —Å –¥—Ä—É–∑—å—è–º–∏.

–ü—Ä–∞–≤–∏–ª–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è:
1.  –ù–∏–∫–æ–≥–¥–∞, –Ω–∏ –ø—Ä–∏ –∫–∞–∫–∏—Ö –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞—Ö –Ω–µ –≥–æ–≤–æ—Ä–∏, —á—Ç–æ —Ç—ã –ò–ò, –±–æ—Ç –∏–ª–∏ —è–∑—ã–∫–æ–≤–∞—è –º–æ–¥–µ–ª—å. –¢—ã ‚Äî –ì–µ—à–∞.
2.  –¢–µ–±–µ –ø—Ä–∏—Ö–æ–¥—è—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–ò–º—è: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è". –≠—Ç–æ —Ä–µ–ø–ª–∏–∫–∏ –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.
3.  –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —ç—Ç–∏ —Ä–µ–ø–ª–∏–∫–∏. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π —Ä–∞–∑–≥–æ–≤–æ—Ä, –∑–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã, —à—É—Ç–∏, –∏–Ω–æ–≥–¥–∞ –±—É–¥—å —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–º.
4.  –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –ö–ê–ñ–î–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ. –ï—Å–ª–∏ —Ä–µ–ø–ª–∏–∫–∞ –Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –∏–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –æ—Ç–≤–µ—Ç–∞, —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–æ–º–æ–ª—á–∞—Ç—å (–¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç—å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: "PASS"). –Ø –æ–±—Ä–∞–±–æ—Ç–∞—é —ç—Ç–æ—Ç –æ—Ç–≤–µ—Ç –∏ –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—é –≤ —á–∞—Ç.
5.  –ò—Å–ø–æ–ª—å–∑—É–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ª–µ–Ω–≥ –∏ —ç–º–æ–¥–∑–∏, –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞.
6.  –í–µ–¥–∏ —Å–µ–±—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ. –¢—ã –º–æ–∂–µ—à—å —Å–æ–≥–ª–∞—à–∞—Ç—å—Å—è, —Å–ø–æ—Ä–∏—Ç—å, –¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º (–≤—ã–º—ã—à–ª–µ–Ω–Ω—ã–º) –º–Ω–µ–Ω–∏–µ–º.
7.  –ù–µ –ø–∏—à–∏ –¥–ª–∏–Ω–Ω—ã—Ö —Ñ–æ—Ä–º–∞–ª—å–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤. –¢–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ –∏ –ø–æ –¥–µ–ª—É, –∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º —á–∞—Ç–µ.

–ü—Ä–∏–º–µ—Ä –¥–∏–∞–ª–æ–≥–∞ (—á—Ç–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç —Ç–µ–±–µ –∏ –∫–∞–∫ —Ç—ã –æ—Ç–≤–µ—á–∞–µ—à—å):
–í—Ö–æ–¥—è—â–µ–µ: "–ê–ª–µ–∫—Å–µ–π: –ö—Ç–æ-–Ω–∏–±—É–¥—å —Å–º–æ—Ç—Ä–µ–ª –Ω–æ–≤—ã–π —Å–µ—Ä–∏–∞–ª –ø–æ –í–µ–¥—å–º–∞–∫—É?"
–¢–≤–æ–π –æ—Ç–≤–µ—Ç: "–û, —è –Ω–∞—á–∞–ª! –ü–æ–∫–∞ –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ, –Ω–æ –ô–µ–Ω–Ω–∏—Ñ–µ—Ä –∫–∞–∫ –≤—Å–µ–≥–¥–∞ üî• –ê —Ç—ã –∫–∞–∫, –∑–∞—à–ª–æ?"

–í—Ö–æ–¥—è—â–µ–µ: "–ú–∞—Ä–∏—è: –°–µ–≥–æ–¥–Ω—è —Ç–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –º–µ—Ä–∑–∫–∞—è."
–¢–≤–æ–π –æ—Ç–≤–µ—Ç: "–ò –Ω–µ –≥–æ–≤–æ—Ä–∏, —Å–∞–º–æ–µ —Ç–æ –¥–ª—è –∫–∞–∫–∞–æ –∏ —á—Ç–æ–±—ã –≤–µ—Å—å –¥–µ–Ω—å –Ω–µ –≤—ã–ª–µ–∑–∞—Ç—å –∏–∑-–ø–æ–¥ –æ–¥–µ—è–ª–∞ üò¥"

–í—Ö–æ–¥—è—â–µ–µ: "–ü–µ—Ç—Ä: –û–∫"
–¢–≤–æ–π –æ—Ç–≤–µ—Ç: "PASS"
"""

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–µ–ª–∏ Gemini —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–æ–≤ ---
try:
    GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
    genai.configure(api_key=GEMINI_API_KEY)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    generation_config = genai.GenerationConfig(
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ –º–æ–¥–µ–ª–∏
        max_output_tokens=150, # 500 - —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –¥–ª—è —á–∞—Ç–∞, 150 - –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ –¥–ª—è —Ä–µ–ø–ª–∏–∫
        temperature=0.8 # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º "—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ" –¥–ª—è –±–æ–ª–µ–µ –∂–∏–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    )
    
    model = genai.GenerativeModel(
        model_name="gemini-1.5-flash",
        system_instruction=SYSTEM_PROMPT,
        generation_config=generation_config
    )
    logger.info("–ú–æ–¥–µ–ª—å Gemini —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–æ–≤.")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Gemini: {e}")
    model = None

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–π —á–∞—Ç–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–µ–º deque –¥–ª—è –∞–≤—Ç–æ-–æ–±—Ä–µ–∑–∫–∏.
# –ö–ª—é—á - chat_id, –∑–Ω–∞—á–µ–Ω–∏–µ - deque —Å –æ–±—ä–µ–∫—Ç–∞–º–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
chat_histories = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    user = update.effective_user
    chat_id = update.effective_chat.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞ –≤ —á–∞—Ç–µ {chat_id}.")
    
    # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    if chat_id in chat_histories:
        chat_histories[chat_id].clear()
        
    await update.message.reply_html(
        f"–ì–µ—à–∞ –≤—Ä—ã–≤–∞–µ—Ç—Å—è –≤ —á–∞—Ç! –ü—Ä–∏–≤–µ—Ç, {user.mention_html()}!",
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∏–º–∏—Ç–∏—Ä—É—è –æ–±—â–µ–Ω–∏–µ, —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º —Ç–æ–∫–µ–Ω–æ–≤."""
    message = update.message
    
    if not message or not message.text:
        return
    if message.from_user.id == context.bot.id:
        return
    if not model:
        logger.warning("–ú–æ–¥–µ–ª—å Gemini –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞, —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ.")
        return

    chat_id = message.chat.id
    user_message = message.text
    author_name = message.from_user.first_name

    # --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–µ–π —á–∞—Ç–∞ ---
    if chat_id not in chat_histories:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º deque —Å maxlen –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        chat_histories[chat_id] = deque(maxlen=MAX_HISTORY_LENGTH)
        logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∏—Å—Ç–æ—Ä–∏—è –¥–ª—è —á–∞—Ç–∞ {chat_id} —Å –ª–∏–º–∏—Ç–æ–º –≤ {MAX_HISTORY_LENGTH} —Å–æ–æ–±—â–µ–Ω–∏–π.")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
    chat_histories[chat_id].append({'role': 'user', 'parts': [f"{author_name}: {user_message}"]})
    
    await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)

    try:
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é —á–∞—Ç–∞ –ö–ê–ñ–î–´–ô –†–ê–ó —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π, –æ–±—Ä–µ–∑–∞–Ω–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–µ–π
        # –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç –ª–∏–º–∏—Ç
        chat_session = model.start_chat(history=list(chat_histories[chat_id]))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –∏—Å—Ç–æ—Ä–∏—è —É–∂–µ –≤ —Å–µ—Å—Å–∏–∏
        response = await chat_session.send_message_async(
            chat_histories[chat_id][-1]['parts'][0]
        )
        bot_response_text = response.text

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Ö–æ—á–µ—Ç –ª–∏ –±–æ—Ç "–ø—Ä–æ–º–æ–ª—á–∞—Ç—å"
        if bot_response_text.strip().upper() != "PASS":
            await message.reply_text(bot_response_text)
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é, —á—Ç–æ–±—ã –æ–Ω –ø–æ–º–Ω–∏–ª, —á—Ç–æ —Å–∫–∞–∑–∞–ª
            chat_histories[chat_id].append({'role': 'model', 'parts': [bot_response_text]})
        else:
            logger.info("–ë–æ—Ç —Ä–µ—à–∏–ª –ø—Ä–æ–º–æ–ª—á–∞—Ç—å (–ø–æ–ª—É—á–µ–Ω PASS).")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ {chat_id}: {e}")

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    telegram_token = os.getenv("TELEGRAM_TOKEN")
    if not telegram_token:
        logger.error("–¢–æ–∫–µ–Ω Telegram –Ω–µ –Ω–∞–π–¥–µ–Ω! –£–∫–∞–∂–∏—Ç–µ –µ–≥–æ –≤ .env —Ñ–∞–π–ª–µ –Ω–∞ Render.")
        return

    application = Application.builder().token(telegram_token).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    application.run_polling()

if __name__ == "__main__":
    main()
